{
  "version": 3,
  "sources": ["browser-route-module:routes/products.$productId.tsx?browser", "../../../app/routes/products.$productId.tsx", "../../../app/components/product-hero.tsx"],
  "sourcesContent": ["export { default, meta } from \"./routes/products.$productId.tsx\";", "import type { V2_MetaFunction, LoaderArgs, } from \"@remix-run/node\";\nimport { useState, useEffect } from 'react';\nimport { useLoaderData, useFetcher, } from \"@remix-run/react\";\nimport { useRef } from \"react\";\nimport { json } from \"@remix-run/node\";\nimport { getProduct } from \"~/modules/shopify/handler\";\nimport ProductHero from \"~/components/product-hero\";\n\n\n\nexport const meta: V2_MetaFunction = () => {\n  return [\n    { title: \"Products\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport async function loader({ params, request }: LoaderArgs) {\n  const productId = params.productId;\n  if (!productId){\n    return json({productId, product: null, variants: [], firstAvailableVariant:{}});\n  };\n\n\n\n  const product:any = await getProduct(productId);\n  const { variants } = product;\n\n  const availableVariants = variants.edges || [];\n  const firstAvailableVariant:Object = availableVariants.find((variant:any) => variant.node.availableForSale) || {};\n\n  return json({productId, product, variants, firstAvailableVariant});\n  \n}\n//  product page layout with image gallery, product details, and add to cart button and quantity selector using shopify product information froma grathql request\n\nexport default function Products() {\n  const { product, variants,  firstAvailableVariant } = useLoaderData<typeof loader>();\n  const [selectedVariant, setSelectedVariant]:[any, Function] = useState(firstAvailableVariant);\n  const [quantity, setQuantity]:[any, Function] = useState(1);\n  const quantityRef = useRef<HTMLInputElement>(null) ;\n  const fetcher = useFetcher();\n\n  const handleVariantChange = (id:string) => {\n    const availableVariants = variants.edges || [];\n    const selectedVariant = availableVariants.find((variant:any) => variant.node.id === id);\n    setSelectedVariant(selectedVariant);\n  };\n\n  useEffect(() => {\n    if (fetcher.state === \"idle\" && fetcher.data == null) {\n      fetcher.load(\"/cart\");\n    }\n    console.log(fetcher);\n  }, [fetcher]);\n\n  \n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.8\" }}>\n      \n      {/* a simple slide show whit 3 images coming from a metafiel called hero */}\n      <div className=\"w-full justify-center mb-8\">\n          <ProductHero images={product.hero?.references.edges}> </ProductHero>\n      </div>\n      {/* a simple gallery with all the images of the product */}\n\n      <div className=\"block md:flex container mx-auto \">\n        <div className=\"flex-1 w-full md:w-auto mb-8 min-w-[50%] relative overflow-x-auto scroll-smooth\">\n          <div className=\"gallery relative whitespace-nowrap md:whitespace-normal block snap-mandatory snap-x max-h-[50vh] md:max-h-max md:snap-none\">\n            {product.images?.edges.map((image: any) => (\n              <img\n                key={image.node.id}\n                className=\"gallery-image snap-start inline-block\"\n                src={image.node.originalSrc}\n                alt={image.node.altText}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"relative\">\n          <div className=\"sticky top-24 pl-8 pr-8 md:pr-0\">\n            <div>\n              <h1 className=\"text-5xl font-medium mb-4 text-green-800\" >\n                {product.title}\n              </h1>\n\n              <div className=\"flex items-center gap-4 my-6\">\n                <div className=\"text-3xl font-thin\">\n                  {product.priceRange.minVariantPrice.amount} {product.priceRange.minVariantPrice.currencyCode} \n                </div>\n                <hr className=\" border-black flex-1 \" />\n                <div className=\" md:text-xl\">\n                  {selectedVariant.node.title}\n                </div>\n              </div>\n\n              <p className=\"mb-4\">\n                {product.description}\n              </p>\n            </div>\n            <fetcher.Form method=\"post\" action=\"/cart\">\n                <div>\n                  <div>\n                    <input type=\"hidden\" name=\"variantId\" value={selectedVariant.node.id} />\n                    <input type=\"number\" \n                     value={quantity}\n                     onChange={(e) => setQuantity(parseInt(e.target.value))}\n                    className=\"border px-4 py-2 border-black\" min=\"1\" max=\"9\" name=\"quantity\" id=\"quantity\" />\n                  </div>\n                </div>\n                <div>\n              <div className=\"flex gap-3 my-8\">{variants?.edges.map((variant: any) => (\n                  <label  key={variant.node.id} \n                    \n                    className={` cursor-pointer gap-2 items-center border-2 rounded-full px-2 py-2 inline-flex\n                    ${variant.node.id === selectedVariant.node.id ? 'border-green-800 hover:border-green-700' : 'border-gray-300 hover:border-gray-400'}\n                    `} htmlFor={variant.node.id}>\n                    <span style={{backgroundColor: variant.node.color?.value}} \n                    className=\" inline-block w-8 h-8 rounded-full\">\n\n                    </span>\n                    <input\n                      type=\"radio\"\n                      name=\"variant\"\n                      id={variant.node.id}\n                      className=\"hidden\"\n                      value={variant.node.id}\n                      onChange={() => handleVariantChange(variant.node.id)}\n                    />\n                    <span className=\"text-sm font-medium\">\n                      {variant.node.title}\n                    </span> \n                    </label>\n                ))}</div>\n              </div>\n              <div className=\"mb-8\">\n                <button type=\"submit\" className=\"px-4 py-2 font-medium rounded bg-green-800 hover:bg-green-900 text-white w-full\">\n                  Add to Cart\n                </button>\n              </div>\n            </fetcher.Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "// a slider compoement for the product hero section with 3 images coming from a metafield called hero with back and forward buttons\nimport React, { useState, useEffect } from 'react';\n\nconst ProductHero = ({ images = [] }: {images: any}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n    }, 6000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [images]);\n\n  const goToPrevious = () => {\n    setCurrentIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);\n  };\n\n  return (\n    <div className=\"slider relative h-96\">\n      <button className=\"slider-button\" onClick={goToPrevious}>\n        &lt;\n      </button>\n      {images.map((image:any, index:number) => (\n        <div\n          key={index}\n          className={`slide absolute top-0  w-full h-full ${index === currentIndex ? 'active' : ' opacity-0'}`}\n          style={{\n            backgroundImage: `url(${image.node.image.url})`,\n          }}\n        ></div>\n      ))}\n      <button className=\"slider-button\" onClick={goToNext}>\n        &gt;\n      </button>\n    </div>\n  );\n};\n\nexport default ProductHero;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_jsx_dev_runtime", "selectedVariant", "_a"]
}
